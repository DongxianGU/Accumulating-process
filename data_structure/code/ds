#include <iostream>

using namespace std;

namespace dx
{
class SqStack
{
  private:
    int *base; //栈底指针
    int top;   //栈顶
    int stackSize;

  public:
    SqStack(int m);
    ~SqStack()
    {
        delete[] base;
        top = -1;
        stackSize = 0;
    };
    void Push(int e);
    int Pop();
    int GetTop();
    int StackEmpty();
    void StackTranverse(); //显示栈中元素
};

void SqStack::Push(int e)
{
    if (top == stackSize - 1)
    {
        cout << "栈满，无法入栈";
        return;
    }
    top++;
    base[top] = e;
}

int SqStack::Pop()
{
    int e;
    if (top = -1)
    {
        cout << "栈空，无法出栈";
        return -1;
    }
    e = base[top--];
    return e;
}

int SqStack::GetTop()
{
    return top;
}

void SqStack::StackTranverse()
{
    if (top == -1)
    {
        cout << "空栈";
    }

    for (int i = 0; i < top; i++)
    {
        cout << "index: " << i << " value: " << base[i] << endl;
    }
}

struct Node
{
    int data;
    Node *next;
};

class LinkStack
{
  private:
    Node *top;

  public:
    LinkStack() { top == NULL; };
    ~LinkStack();
    void Push(int e);
    int Pop();
    int GetTop()
    {
        if (top != NULL)
            return top->data;
    };
    bool Empty() { return top != NULL ? 1 : 0; };
};

LinkStack::~LinkStack()
{
    Node *p;
    while (top)
    {
        p = top->next;
        delete top;
        top = p;
    }
}

void LinkStack::Push(int e)
{
    Node *s = new Node;

    if (!s)
    {
        cout << "内存分配失败";
        return;
    }
    s->data = e;
    s->next = top;
    top = s;
}

int LinkStack::Pop()
{
    int x;
    if (top == NULL)
    {
        cout << "栈溢出";
        return -1;
    }
    x = top->data;
    Node *p = top;
    top = top->next;
    delete p;
    return x;
}

const int LISTINCREMENT = 10;
typedef int ElemType;

class SqList_d
{
  public:
    ElemType *elem;
    int length;
    int maxSize;

  public:
    SqList_d(int n);
    ~SqList_d();
    void SqListInsert(int i, int e);
    int SqListDelete(int i);
    void printAllData();
};

SqList_d::SqList_d(int n)
{
    elem = (int *)malloc(n * sizeof(int));
    length = 0;
    maxSize = n;
}

SqList_d::~SqList_d()
{
    delete[] elem;
    length = 0;
    maxSize = 0;
}

void SqList_d::SqListInsert(int i, int e)
{
    if (length >= maxSize)
    {
        elem = (int *)realloc(elem, (maxSize + LISTINCREMENT) * sizeof(int));
    }
    if (i < 1 || i > length + 1)
    {
        cout << "插入位置异常";
        return;
    }

    for (int j = length; j >= i; j--)
        elem[j] = elem[j - 1];
    elem[i - 1] = e;
    length++;
}

int SqList_d::SqListDelete(int i)
{
    int e;

    if (length <= 0)
    {
        cout << "溢出";
        return -1;
    }

    if (i < 1 || i > length + 1)
    {
        /* code */
        cout << "删除位置异常";
        return -1;
    }

    e = elem[i - 1];

    for (int j = i; j < length; j++)
    {
        elem[j - 1] = elem[j];
    }
    length--;
    return e;
}

void SqList_d::printAllData()
{

    for (int i = 0; i < length; i++)
    {
        /* code */
        cout << "Item: " << i << " value: " << this->elem[i] << endl;
    }
}
} // namespace dx
